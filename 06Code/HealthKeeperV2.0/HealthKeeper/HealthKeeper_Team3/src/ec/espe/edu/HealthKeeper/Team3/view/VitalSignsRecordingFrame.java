package ec.espe.edu.HealthKeeper.Team3.view;

import javax.swing.JFrame; // Needed for JFrame.DISPOSE_ON_CLOSE
import javax.swing.JOptionPane; // For user feedback messages

/**
 * JFrame class for recording vital signs.
 * This frame allows users to input temperature, pulse, systolic, and diastolic blood pressure.
 */
public class VitalSignsRecordingFrame extends javax.swing.JFrame {

    // Declare a private field to hold a reference to the parent MenuFrame
    private MenuFrame parentMenuFrame;

    /**
     * Creates new form VitalSignsRecordingFrame.
     * This constructor should be used when opening this frame from the MenuFrame.
     * @param parent The instance of the MenuFrame that opened this frame.
     */
    public VitalSignsRecordingFrame(MenuFrame parent) {
        this.parentMenuFrame = parent; // Store the reference to the parent menu frame
        initComponents();
        this.setLocationRelativeTo(null); // Center the frame on the screen
        setTitle("HealthKeeper - Record Vital Signs"); // Set a descriptive title for the frame
        // Set default close operation to DISPOSE_ON_CLOSE.
        // This ensures that only this window closes, and the application continues to run.
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * Default constructor for VitalSignsRecordingFrame.
     * This constructor might be used for independent testing, but in a multi-frame
     * application, it's generally better to use the parameterized constructor
     * to ensure the parent frame relationship is established.
     *
     * IMPORTANT: If this constructor is used, `btnBackToMenuActionPerformed` will
     * create a *new* MenuFrame if clicked, as `parentMenuFrame` will be null.
     */
    public VitalSignsRecordingFrame() {
        // This constructor is typically for standalone testing, not for
        // normal flow from a parent menu.
        this(null); // Call the parameterized constructor with a null parent
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lTemperature = new javax.swing.JLabel();
        lPulse = new javax.swing.JLabel();
        lSystolic = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        txtPulse = new javax.swing.JTextField();
        txtSystolic = new javax.swing.JTextField();
        lDiastolic = new javax.swing.JLabel();
        txtDiastolic = new javax.swing.JTextField();
        btnRecordVitalSigns = new javax.swing.JButton();
        btnBackToMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lTitle.setText("Vital Signs Recording");

        lTemperature.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lTemperature.setText("Temperature(C):");

        lPulse.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lPulse.setText("Pulse (bmp):");

        lSystolic.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lSystolic.setText("Systolic BP:");

        txtTemperature.setBackground(new java.awt.Color(255, 255, 255));
        txtTemperature.setForeground(new java.awt.Color(0, 0, 0));

        txtPulse.setBackground(new java.awt.Color(255, 255, 255));
        txtPulse.setForeground(new java.awt.Color(0, 0, 0));

        txtSystolic.setBackground(new java.awt.Color(255, 255, 255));
        txtSystolic.setForeground(new java.awt.Color(0, 0, 0));

        lDiastolic.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lDiastolic.setText("Diastolic BP:");

        txtDiastolic.setBackground(new java.awt.Color(255, 255, 255));
        txtDiastolic.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(243, 280, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(lPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(lTemperature)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lPulse)
                    .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSystolic)
                    .addComponent(txtSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDiastolic)
                    .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRecordVitalSigns.setBackground(new java.awt.Color(51, 204, 0));
        btnRecordVitalSigns.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRecordVitalSigns.setForeground(new java.awt.Color(0, 0, 0));
        btnRecordVitalSigns.setText("Record vital signs");
        btnRecordVitalSigns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordVitalSignsActionPerformed(evt);
            }
        });

        btnBackToMenu.setBackground(new java.awt.Color(153, 102, 0));
        btnBackToMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBackToMenu.setForeground(new java.awt.Color(0, 0, 0));
        btnBackToMenu.setText("Back to menu");
        btnBackToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(btnRecordVitalSigns)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBackToMenu)
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRecordVitalSigns)
                    .addComponent(btnBackToMenu))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRecordVitalSignsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordVitalSignsActionPerformed
        // Retrieve vital sign values from text fields
        String tempStr = txtTemperature.getText();
        String pulseStr = txtPulse.getText();
        String sysBPStr = txtSystolic.getText(); // Corrected to use txtSystolic
        String diasBPStr = txtDiastolic.getText(); // Corrected to use txtDiastolic

        // Basic validation: Check if any field is empty
        if (tempStr.isEmpty() || pulseStr.isEmpty() || sysBPStr.isEmpty() || diasBPStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all vital sign fields.",
                    "Input Error", JOptionPane.WARNING_MESSAGE);
            return; // Stop processing if any field is empty
        }

        try {
            // Parse string inputs to numerical types
            double temperature = Double.parseDouble(tempStr);
            int pulse = Integer.parseInt(pulseStr);
            int systolicBP = Integer.parseInt(sysBPStr);
            int diastolicBP = Integer.parseInt(diasBPStr);

            // For now, let's just print the recorded vital signs to the console.
            // In a real application, you would save these to a database (e.g., MongoDB).
            System.out.println("Vital Signs Recorded:");
            System.out.println("  Temperature: " + temperature + " C");
            System.out.println("  Pulse: " + pulse + " bpm");
            System.out.println("  Blood Pressure: " + systolicBP + "/" + diastolicBP + " mmHg");

            // Provide user feedback that the vital signs were "recorded"
            JOptionPane.showMessageDialog(this, "Vital signs recorded successfully!",
                    "Success", JOptionPane.INFORMATION_MESSAGE);

            // Clear the text fields after successful recording
            txtTemperature.setText("");
            txtPulse.setText("");
            txtSystolic.setText("");
            txtDiastolic.setText("");

        } catch (NumberFormatException e) {
            // Handle cases where input is not a valid number
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter numerical values for vital signs.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            System.err.println("Error parsing vital sign input: " + e.getMessage());
        } catch (Exception e) {
            // Catch any other unexpected errors
            JOptionPane.showMessageDialog(this, "An unexpected error occurred while recording vital signs.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            System.err.println("Unexpected error in vital signs recording: " + e.getMessage());
        }
    }//GEN-LAST:event_btnRecordVitalSignsActionPerformed

    private void btnBackToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMenuActionPerformed
        this.dispose(); // Close the current VitalSignsRecordingFrame

        // Check if the parent menu frame exists and make it visible
        if (parentMenuFrame != null) {
            parentMenuFrame.setVisible(true);
        } else {
            // This case should ideally not happen if the frame is always opened from MenuFrame.
            // It's a fallback for direct testing of this frame.
            System.err.println("Warning: parentMenuFrame was null. Opening a new MenuFrame.");
            // You might want to remove this line in your final application if you ensure
            // VitalSignsRecordingFrame is always opened via a MenuFrame instance.
            new MenuFrame().setVisible(true); // Create a new MenuFrame instance
        }
    }//GEN-LAST:event_btnBackToMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VitalSignsRecordingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VitalSignsRecordingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VitalSignsRecordingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VitalSignsRecordingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // When running this frame directly for testing, pass null as there's no parent MenuFrame.
                // In your actual application, an instance of MenuFrame will be passed here.
                new VitalSignsRecordingFrame(null).setVisible(true); // Pass null for standalone testing
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackToMenu;
    private javax.swing.JButton btnRecordVitalSigns;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lDiastolic;
    private javax.swing.JLabel lPulse;
    private javax.swing.JLabel lSystolic;
    private javax.swing.JLabel lTemperature;
    private javax.swing.JLabel lTitle;
    private javax.swing.JTextField txtDiastolic;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtSystolic;
    private javax.swing.JTextField txtTemperature;
    // End of variables declaration//GEN-END:variables
}
